import numpy as np
import matplotlib.pyplot as plt
import os
from sklearn.decomposition import PCA
from matplotlib.lines import Line2D
from sklearn.cluster import KMeans
import json
import tkinter as tk

# import the essential packages: numpy as np, matplotlib.pyplot as plt, sklearn.decomposition.PCA as pca
# File container overall is dictionary. The naming format is eccentricity_videoclip_channel. For example: ecc03_2_y1x.
# Please refer bashload function for the naming regulation.
####################### Unit for manual data checking ##########################
class Datahandle:
    def __init__(self, filename):
        # path of data
        self.filename = filename
    def read(self):
        if self.filename[-3:] != 'txt':
            print('File extension is not *.txt')
        else:
            return np.loadtxt(self.filename)
def testplot(x,y):
    #   require import matplotlib.pyplot as plt
    #   require
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    if type(x) == str:
        x = Datahandle(x)
    if type(y) == str:
        y = Datahandle(y)
    ax.plot(x.read(), y.read(), '+')

####################### Main process block ####################################
# Bash handle.
class handle:
    def __init__(self):
        return
# Batch unit process
def bashload(main_path):

    # Please arrange your data in the following structure:
    #
    #   -main_path
    #       -2019xxxx_eccxx(the folder format should be time_ecc00)
    #           -video data set(pure number, etc 1,2,3...)
    #               -y1x.txt (y1:yoyo1, y3:yoyo3 etc). TODO: Implement file format modification unit.
    main_path = main_path
    tot_file = {}
    if os.path.exists(main_path):
        os.chdir(main_path)
    else:
        print("No such directory, please check.")
        return ""
    subfolder = os.listdir()

    for i in subfolder:
        if 'ecc' not in i:
            continue
        subpath = main_path+'/'+i
        os.chdir(subpath)
        subsubfolder = os.listdir()
        for j in subsubfolder:
            if j[-3:] == 'txt' or j[-4:] == 'json':
                subsubfolder.remove(j)
        for j in subsubfolder:
            if j[-3:]=="txt":
                continue
            else:
                temp = subpath+'/'+j
                os.chdir(temp)
                prefix = i+'_'+j
                filename = os.listdir()
            for k in filename:
                fname_temp = prefix + '_' + k[:3]
                fname_temp = fname_temp.split('_')[1] + '_' + fname_temp.split('_')[2]+'_' + fname_temp.split('_')[3]
                fpath_temp = temp + '/' + k
                print('Reading files from:', fpath_temp)
                tot_file[fname_temp] = np.loadtxt(fpath_temp)
    a = handle
    a.tot_file = tot_file
    a.main_path = main_path
    return a, tot_file
def bashvector(handle, mode='raw'):
    # Calculate the vector separation for each video
    # tot_file: dictionary of data. Generated by bashload function.
    try:
        if mode == 'raw':
            tot_file = handle.tot_file
        elif mode == 'clean':
            tot_file = handle.tot_file_shift
        tot_vector = {}
        temp = ""
        for i in tot_file:
            prefix = i.split('_')[0]+'_'+i.split('_')[1]
            if prefix != temp:
                temp = prefix
                tot_vector[prefix+'_delx'] = tot_file[prefix+'_y3x']-tot_file[prefix+'_y1x']
                tot_vector[prefix+'_dely'] = tot_file[prefix+'_y3y']-tot_file[prefix+'_y1y']
            else:
                continue
        if mode == 'raw':
            handle.tot_vector = tot_vector
        elif mode == 'clean':
            handle.tot_vector_clean = tot_vector
    except:
        print("No tot_file attribute is defined for current input. Please refer to bashload function.")
        return ""
    return handle, tot_vector
def bashoverlay(handle, mode = 'raw', set = 'vector'):
    # over lay videos sharing the same cavity shape
    # tot_vector: delta x,y dictionary. Generated by bashvector function.
    try:
        if set == 'vector':
            if mode == 'clean':
                tot_vector = handle.tot_vector_clean
            elif mode == 'raw':
                tot_vector = handle.tot_vector
            temp = ""
            tot_vec_overlay = {}
            for i in tot_vector:
                prefix = i.split('_')[0]
                if prefix != temp:
                    temp = prefix
                    tot_vec_overlay[temp + '_delx'] = np.array([])
                    tot_vec_overlay[temp + '_dely'] = np.array([])

            for i in tot_vector:
                prefix = i.split('_')[0]
                # print(i[-1])
                if i[-1] =='x':
                    tot_vec_overlay[prefix + '_delx'] = np.append(tot_vec_overlay[prefix + '_delx'], tot_vector.get(i))
                else:
                    tot_vec_overlay[prefix + '_dely'] = np.append(tot_vec_overlay[prefix + '_dely'], tot_vector.get(i))
            if mode == 'raw':
                handle.tot_vec_overlay = tot_vec_overlay
            elif mode == 'clean':
                handle.tot_vec_overlay_clean = tot_vec_overlay

        elif set == 'position':
            if mode == 'clean':
                tot_pos = handle.tot_file_shift
            elif mode == 'raw':
                tot_pos = handle.tot_file
            temp = ""
            tot_vec_overlay = {}
            for i in tot_pos:
                prefix = i.split('_')[0]
                if prefix != temp:
                    temp = prefix
                    tot_vec_overlay[temp + '_y1x'] = np.array([])
                    tot_vec_overlay[temp + '_y1y'] = np.array([])
                    tot_vec_overlay[temp + '_y3x'] = np.array([])
                    tot_vec_overlay[temp + '_y3y'] = np.array([])

            for i in tot_pos:
                prefix = i.split('_')[0]
                # print(i[-1])
                if i[-3:] == 'y1x':
                    tot_vec_overlay[prefix + '_y1x'] = np.append(tot_vec_overlay[prefix + '_y1x'], tot_pos.get(i))
                elif i[-3:] == 'y1y':
                    tot_vec_overlay[prefix + '_y1y'] = np.append(tot_vec_overlay[prefix + '_y1y'], tot_pos.get(i))
                elif i[-3:] == 'y3x':
                    tot_vec_overlay[prefix + '_y3x'] = np.append(tot_vec_overlay[prefix + '_y3x'], tot_pos.get(i))
                elif i[-3:] == 'y3y':
                    tot_vec_overlay[prefix + '_y3y'] = np.append(tot_vec_overlay[prefix + '_y3y'], tot_pos.get(i))
                else:
                    print('Bug in bashvector with set=position')
                    print(i[-3:])
            if (mode == 'raw') and (set == 'vector'):
                handle.tot_vec_overlay = tot_vec_overlay
            elif (mode == 'clean') and (set == 'vector'):
                handle.tot_vec_overlay_clean = tot_vec_overlay
            elif (mode == 'raw') and (set == 'position'):
                handle.tot_pos_overlay = tot_vec_overlay
            elif (mode == 'clean') and (set == 'position'):
                handle.tot_pos_overlay_shift = tot_vec_overlay
        return handle, tot_vec_overlay
    except:
        print('No tot_vector attribute is defined for current input. Please refer to bashvector function.')
        return
def bashfree(handle, type='o'):
    # Please refer to 'Entropic Segregation of Polymers under Confinement' Pg107, Eq. 5.3.1. Author: Vorgelegt von Elena Minina.
    # 1.PCA alignment of the eclipse(require sklearn.decomposition.PCA module)
    # 2.Define the x-axis separation by coding the data in pca's principle axis
    # 3.Calculate the landscape
    # type------"v" means input is tot_vector from bashvector, "o" means input is totoverlay from bashoverlay. TODO: Automatically distinguish the file type by its name format.
    #################################################################
    try:
        tot_vector = handle.tot_vector
        tot_free ={}
        sep_projection = {}
        temp = ''
        n_components = 2
        pca = PCA(n_components=n_components)
        for i in tot_vector:
            if type == "v":
                prefix = i.split('_')[0] + '_' + i.split('_')[1]
            elif type == "o":
                prefix = i.split('_')[0]
                tot_vector = handle.tot_vec_overlay
            else:
                print("Please insert the type of input")
                break
            if prefix != temp:
                temp = prefix
                xtemp = tot_vector[prefix+'_delx']
                xtemp = xtemp - np.mean(xtemp)
                ytemp = tot_vector[prefix+'_dely']
                ytemp = ytemp - np.mean(ytemp)
                xtrain = np.transpose(np.array([xtemp, ytemp]))
                # x_sep is a 2*n array where row is principle axis, column is the coding.
                x_sep = np.transpose(pca.fit_transform(xtrain))
                sep_projection[temp + '_sep'] = x_sep
                # free energy
                xhist, xbin = np.histogram(x_sep[0, :], bins = 30)
                xhist_short, xbin_short = np.histogram(x_sep[1, :], bins=30)
                index = np.argwhere(xbin>=0)
                index_short = np.argwhere(xbin_short>=0)
                free = -np.log(xhist/len(x_sep[0, :])) + np.log(xhist[index[0, 0]]/len(x_sep[0, :]))
                free_short = -np.log(xhist_short/len(x_sep[1, :])) + np.log(xhist_short[index_short[0, 0]]/len(x_sep[1, :]))
                tot_free[temp + '_F'] = free
                tot_free[temp+'_Fs'] = free_short
                tot_free[temp + '_bins'] = xbin[0:-1]
                tot_free[temp + '_binss'] = xbin_short[0:-1]
        handle.tot_free = tot_free
        return handle, tot_free
    except:
        print('No tot_vector or tot_vec_overlay attribute is defined for current input. Please refer to bashvector function.')
        return

# def bashfreeplt(handle):
#     # tot_free--
#     # Here the input has to come from bashfree with type'o'. Otherwise there will be too many lines in the graph. Too disturbing.
#     try:
#         fig = plt.figure()
#         ax = fig.add_subplot(1,1,1)
#         temp = ''
#         legend = []
#         tot_free = handle.tot_free
#         for i in tot_free:
#             if len(i.split('_')) == 2:
#                 prefix = i.split('_')[0]
#             else:
#                 prefix = i.split('_')[0] + '_' + i.split('_')[1]
#             if prefix != temp:
#                 temp = prefix
#                 legend.append(temp)
#                 legend.append(temp+'inv')
#                 ax.plot(tot_free[prefix+'_bins'], tot_free[prefix+'_F'])
#                 if prefix != 'ecc0':
#                     ax.plot(tot_free[prefix + '_binss'], tot_free[prefix + '_Fs'])
#         ax.legend(legend)
#         return ax
#     except:
#         print('No tot_free attribute is defined for current input. Please refer to bashfree function.')

# def bashpos(handle):
#     # mapping the data from negative axis to positive. Assuming the symmetric.
#     try:
#         tot_vector = handle.tot_vector
#         for i in tot_vector:
#             if i.split('_')[-1] == 'delx':
#                 tot_vector[i] = abs(tot_vector[i])
#         return tot_vector
#     except:
#         print('No tot_vector attribute is defined for current input. Please refer to bashvector function.')
def bashshift(handle, n_init = 5, max_iter = 100, tol=0.001):
    ### Using k-means to shift all the data to 0 ###
    ## TODO: Implement the adaptive n_clusters.
    ## Output: handle.kmeans['ecc0_1']: Kmeans class. Please refer: https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html
    ## for more info.
    tot_file_clean = handle.tot_file_clean
    temp = ''
    kmeans = {}
    for i in tot_file_clean:
        # if i.split('_')[0]+'_'+i.split('_')[1] != 'ecc09_2': # Comment here to run through all dataset. Right now it's set
        #     continue  #to ecc09 set for debugging.
        if (temp != (i.split('_')[0] + '_' + i.split('_')[1])) and (i[-5:] != 'clean'):
            temp = i.split('_')[0] + '_' + i.split('_')[1]
            fig = plt.figure()
            ax = fig.add_subplot(1, 1, 1)
            y3x = tot_file_clean[temp + '_y3x']
            y3y = tot_file_clean[temp + '_y3y']
            yoyo3 = np.transpose(np.array([y3x, y3y]))
            ax.plot(y3x, y3y, '+')
            ax.set_title(temp)
            plt.show()
            n_clusters = input("How many clusters are inside the plot? Please insert: ")
            plt.close(fig)
            km = KMeans(n_clusters=int(n_clusters), n_init=n_init, max_iter=max_iter, tol=tol, precompute_distances='auto',
                        verbose=0, random_state=None, algorithm='full')
            km.fit(yoyo3)
            kmeans[temp] = km
    #### shift the data to zero ####
    temp = ''
    tot_file_shift = {}
    for i in tot_file_clean:
        # if i.split('_')[0] + '_' + i.split('_')[1] != 'ecc09_2': # Comment here to run through all dataset. Right now it's set
        #     continue                   # to ecc09 set for debugging.
        if (temp != (i.split('_')[0] + '_' + i.split('_')[1])) and (i[-5:] != 'clean'):
            temp = i.split('_')[0] + '_' + i.split('_')[1]
            y1x_centered = np.zeros(len(handle.tot_file_clean[temp + '_y1x']))# centered data container.
            y1y_centered = np.zeros(len(handle.tot_file_clean[temp + '_y1y']))
            y3x_centered = np.zeros(len(handle.tot_file_clean[temp + '_y3x']))
            y3y_centered = np.zeros(len(handle.tot_file_clean[temp + '_y3y']))
            for j in range(kmeans[temp].n_clusters):
                center = kmeans[temp].cluster_centers_[j]
                mask = (kmeans[temp].labels_- j) == 0
                y1x = handle.tot_file_clean[temp + '_y1x'] #raw data
                y1y = handle.tot_file_clean[temp + '_y1y']
                y3x = handle.tot_file_clean[temp + '_y3x']
                y3y = handle.tot_file_clean[temp + '_y3y']
                y1x_ma = y1x[mask] # Masked data.Belonging to different group
                y1y_ma = y1y[mask]
                y3x_ma = y3x[mask]
                y3y_ma = y3y[mask]
                y1x_centered[mask] = y1x_ma - center[0] # Centered data. All shifted to zero
                y1y_centered[mask] = y1y_ma - center[1]
                y3x_centered[mask] = y3x_ma - center[0]
                y3y_centered[mask] = y3y_ma - center[1]

            tot_file_shift[temp + '_y1x'] = list(y1x_centered)
            tot_file_shift[temp + '_y1y'] = list(y1y_centered)
            tot_file_shift[temp + '_y3x'] = list(y3x_centered)
            tot_file_shift[temp + '_y3y'] = list(y3y_centered)
    os.chdir(handle.main_path+'/data')
    import json
    json = json.dumps(tot_file_shift)
    f = open('tot_file_clean.json', 'w')
    f.write(json)
    f.close()
    for filename in tot_file_shift:
        tot_file_shift[filename] = np.array(tot_file_shift[filename])
    handle.tot_file_shift = tot_file_shift
    return handle, tot_file_shift

def bashroi(handle):
    ## Manual clean all the data outside the ROI. This will pop up a window and let usr select the ROI.
    ## Data outside ROI will be deleted.
    ## Require bashvector.
    ## TODO:Implement here
    main_path = handle.main_path
    class ClickCap:
        def __init__(self, fig):
            self.xs = []
            self.ys = []
            self.times = 0
            self.cid = fig.canvas.mpl_connect('button_press_event', self)
        def __call__(self, event):
            if self.times != 1:
                self.xs.append(event.xdata)
                self.ys.append(event.ydata)
                print('%s click: button=%d, x=%d, y=%d, xdata=%f, ydata=%f' %
                      ('double' if event.dblclick else 'single', event.button,
                       event.x, event.y, event.xdata, event.ydata))
                self.times = self.times + 1
            else:
                self.xs.append(event.xdata)
                self.ys.append(event.ydata)
                print('%s click: button=%d, x=%d, y=%d, xdata=%f, ydata=%f' %
                      ('double' if event.dblclick else 'single', event.button,
                       event.x, event.y, event.xdata, event.ydata))
                self.times = 0
                plt.close('all')

    tot_vector = handle.tot_vector
    temp = ''
    roi = {}
    for i in tot_vector:
        if temp != i.split('_')[0] + '_' + i.split('_')[1]:
            fig = plt.figure()
            ax = fig.add_subplot(1, 1, 1)
            cp = ClickCap(fig)
            temp = i.split('_')[0] + '_' + i.split('_')[1]
            ax.plot(tot_vector[temp + '_delx'], tot_vector[temp + '_dely'], '+')
            ax.set_xlim([-15, 15])
            ax.set_ylim([-12, 12])
            ax.set_title(temp+'_ROI selection')
            ax.grid(b=True, which='both', axis='both')
            plt.show()
            roi[temp + '_x'] = cp.xs
            roi[temp + '_y'] = cp.ys
            # print(crop)
    import json
    os.chdir(main_path+'/data')
    json = json.dumps(roi)
    f = open('roi.json', 'w')
    f.write(json)
    f.close()
    handle.roi = roi
    print(roi)
    return handle, roi
def bashclean(handle):
    tot_vector = handle.tot_vector
    maskfile = {}
    try:
        ## load roi file saved in ./roi/roi.json
        main_path = handle.main_path
        os.chdir(main_path + '/data')
        file = os.listdir()
        tot_file_clean ={}
        for i in file:
            if i != 'roi.json':
                continue
            else:
                roi = json.load(open(i))
                # print(roi)
                temp = ''
                for j in roi:
                    if temp != j.split('_')[0] + '_' + j.split('_')[1]:
                        temp = j.split('_')[0] + '_' + j.split('_')[1]
                        xmin = min(roi[temp + '_x'])
                        xmax = max(roi[temp + '_x'])
                        ymin = min(roi[temp + '_y'])
                        ymax = max(roi[temp + '_y'])
                        delx = tot_vector[temp + '_delx']
                        dely = tot_vector[temp + '_dely']
                        maskx = (delx > xmin) * (delx < xmax)
                        masky = (dely > ymin) * (dely < ymax)
                        mask = maskx * masky
                        handle.tot_vector[temp + '_delx_clean'] = tot_vector[temp + '_delx'][mask]
                        handle.tot_vector[temp + '_dely_clean'] = tot_vector[temp + '_dely'][mask]
                        tot_file_clean[temp + '_y1x'] = handle.tot_file[temp + '_y1x'][mask]
                        tot_file_clean[temp + '_y1y'] = handle.tot_file[temp + '_y1y'][mask]
                        tot_file_clean[temp + '_y3x'] = handle.tot_file[temp + '_y3x'][mask]
                        tot_file_clean[temp + '_y3y'] = handle.tot_file[temp + '_y3y'][mask]
                        maskfile[temp + '_mask'] = mask #False is the index of the outside points.
                handle.tot_file_clean = tot_file_clean
                handle.tot_roimask = maskfile
                print('Cleaning finished!')
        return handle, tot_file_clean
    except:
        print('Please run bashroi first.')
        return

###############################################
if __name__=="__main__":

    main_path = "D:/McGillResearch/2019Manuscript_Analysis/Analysis/tplasmid"
    os.chdir(main_path+'/data')

    handle, tot_file = bashload(main_path)
    handle, tot_vector = bashvector(handle, mode='raw')
    handle, tot_vec_overlay = bashoverlay(handle, mode='raw')
    handle, maskfile = bashclean(handle)


    tot_file_clean = json.load(open('tot_file_clean.json'))
    for filename in tot_file_clean:
        tot_file_clean[filename] = np.array(tot_file_clean[filename])
    handle.tot_file_clean = tot_file_clean

    handle, tot_vector_clean = bashvector(handle, mode='clean')
    handle, tot_vec_overlay_clean = bashoverlay(handle, mode='clean')
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.plot(tot_vec_overlay_clean['ecc09_delx'], tot_vec_overlay_clean['ecc09_dely'], '+')
    ax.set_xlim([-20, 20])
    ax.set_ylim([-20, 20])
    plt.show()